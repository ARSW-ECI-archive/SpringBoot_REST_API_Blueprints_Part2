<<<<<<< HEAD
**Condiciones de carrera:
Puede ocurrir que durante una inserción, despues se realice una consulta, pero esta segunda ocurra antes, devolviendo datos erroneos.

Varias inserciones que ocurren casi al mismo tiempo, puedan que al momento de guardar un plano esto no ocurra, dando informacion incorrecta al momento de consultarlos.

**Regiones criticas:
Las operaciones de consultar y guardar planos en la API servicios son concideradas como regiones criticas.

Solución 
El metodo para guardar planos se sincronizara ya que esta es la unica manerda de solucionar uno de los problemas anteriormente descritos.
Para solucionar el metodo de consulta se podria un metodo de actualizar para que no hubiera tanta carga en espera del sistema.
=======
La primera condición de carrera es que dos hilos intenten modificar de alguna manera la lista (ya sea adicionando o accediendo a algún elemento) al mismo tiempo
Esto lo solucionamos modificando el HashMap en InMemoryBlueprintPersistence por un ConcurrentHashMap, el cual limita las modificaciones múltiples.

La segunda condición de carrera, es que se acceda a algún plano, y este se intente modificar o acceder al mismo tiempo que otro está trabajando con dicho plano.
Por lo cual, en cada uno de los métodos de los servicios (InMemoryBlueprintPersistence), vamos a bloquear el acceso múltiple por medio de syncronized, pero de planos específicos, con el fin
de no limitar la eficiencia de la aplicación
>>>>>>> fbbe5afaa9575d774ab1c3c7e40c6558066328cc
